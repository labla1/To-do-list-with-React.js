{"version":3,"sources":["Form/index.js","Tasks/index.js","InnerButtons/index.js","Section/index.js","Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","placeholder","onChange","target","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","onClick","id","content","Innerbuttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","innerbuttons","Main","children","App","setHideDone","setTasks","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uVA0BeA,G,MAvBF,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAAgB,EACiBC,mBAAS,IAD1B,mBACpBC,EADoB,KACJC,EADI,KAU3B,OACI,0BAAMC,UAAU,OAAOC,SARN,SAACC,GAClBA,EAAMC,iBACNP,EAAWE,EAAeM,QAC1BL,EAAkB,MAMd,2BACAM,MAASP,EACTE,UAAU,mBACVM,YAAY,0BACZC,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAcT,EAAkBS,EAAOH,UAEjD,4BAAQL,UAAU,gBAAlB,gBCAGS,G,MAlBD,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,WAAYC,EAA/B,EAA+BA,eAA/B,OACV,6BACKH,EAAMI,KAAI,SAAAC,GAAI,OACX,yBAAKf,UAAS,wBAAmBe,EAAKC,MAAQL,EAAW,eAAiB,KACtE,4BAAQX,UAAU,6BAA6BiB,QAAS,kBAAKJ,EAAeE,EAAKG,MAC5EH,EAAKC,KAAO,SAAM,IAEvB,0BAAMhB,UAAS,wBAAmBe,EAAKC,KAAO,0CAA4C,KACrFD,EAAKI,SAEV,4BAAQnB,UAAU,8BAA8BiB,QAAS,kBAAML,EAAWG,EAAKG,MAA/E,iBCMDE,G,MAhBM,SAAC,GAAD,IAAGV,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUU,EAApB,EAAoBA,eAAgBC,EAApC,EAAoCA,WAApC,OACjBZ,EAAMa,OAAS,GACf,0BAAMvB,UAAU,iBACZ,4BACIiB,QAASI,EACTrB,UAAU,yBAFd,IAEwCW,EAAW,OAAS,OAF5D,eAKA,4BACIM,QAASK,EACTtB,UAAU,wBACVwB,SAAUd,EAAMe,OAAM,qBAAGT,SAH7B,wBCEOU,G,MAVC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,aAAhB,OACd,6BAAS7B,UAAU,WACjB,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,mBAAmB2B,GAChCE,GAEFD,KCCUE,G,MAPF,SAAC,GAAD,IAAGH,EAAH,EAAGA,MAAOI,EAAV,EAAUA,SAAV,OACT,0BAAM/B,UAAU,QACZ,wBAAIA,UAAU,gBAAgB2B,GAC7BI,KC2EMC,MAzEf,WAAgB,IAAD,EACmBnC,oBAAS,GAD5B,mBACNc,EADM,KACIsB,EADJ,OAEapC,mBAAS,IAFtB,mBAENa,EAFM,KAECwB,EAFD,KA0Cb,OACE,kBAAC,EAAD,CACEP,MAAM,cAEN,kBAAC,EAAD,CACEA,MAAM,eACNC,KAAM,kBAAC,EAAD,CACNhC,WArBa,SAACE,GACK,KAAnBA,GAGJoC,GAAS,SAAAxB,GAAK,4BACRA,GADQ,CAEZ,CACES,QAASrB,EACTkB,MAAM,EACNE,GAAqB,IAAjBR,EAAMa,OAAe,EAAIb,EAAMA,EAAMa,OAAQ,GAAGL,GAAK,aAe3D,kBAAC,EAAD,CACES,MAAM,YACNC,KACE,kBAAC,EAAD,CACElB,MAAOA,EACPC,SAAUA,EACVC,WAtDS,SAACM,GAClBgB,EAASxB,EAAMyB,QAAO,SAAApB,GAAI,OAAIA,EAAKG,KAAOA,OAsDlCL,eA/Ca,SAACK,GACtBgB,GAAS,SAAAxB,GAAK,OAAIA,EAAMI,KAAI,SAAAC,GAC1B,OAAIA,EAAKG,KAAOA,EACP,2BAAKH,GAAZ,IAAkBC,MAAOD,EAAKC,OAEzBD,WA4CLc,aACE,kBAAC,EAAD,CACEnB,MAAOA,EACPC,SAAUA,EACVU,eAzDa,WACrBY,GAAY,SAAAtB,GAAQ,OAAKA,MAyDjBW,WA7CS,WACjBY,GAAS,SAAAxB,GAAK,OAAIA,EAAMI,KAAI,SAAAJ,GAAK,kCAC5BA,GAD4B,IAE/BM,MAAM,iBCpBQoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.78f06b7c.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Form = ({addNewTask}) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        addNewTask(newTaskContent.trim());\r\n        setNewTaskContent(\"\");\r\n    }\r\n\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input \r\n            value = {newTaskContent}\r\n            className=\"form__inputField\" \r\n            placeholder=\"What do you want to do?\"\r\n            onChange={({target}) => setNewTaskContent(target.value)}\r\n            />\r\n            <button className=\"form__button\">Add to-do</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({tasks, hideDone, removeTask, toggleTaskDone}) => (\r\n    <div>\r\n        {tasks.map(task => (\r\n            <div className={`taskContainer ${task.done && hideDone ? \"task--hidden\" : \"\"}`}>\r\n                <button className=\"taskContainer__checkButton\" onClick={() =>toggleTaskDone(task.id)}>\r\n                    {task.done ? \"âœ”\" : \"\"}\r\n                </button>\r\n                <span className={`addedTaskText ${task.done ? \"taskContainer__checkButton--lineThrough\" : \"\"}`}>\r\n                    {task.content}\r\n                </span>\r\n                <button className=\"taskContainer__removeButton\" onClick={() => removeTask(task.id)}>\r\n                    &#10006;\r\n                </button>\r\n            </div>\r\n        ))}\r\n    </div>\r\n);\r\n\r\nexport default Tasks;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Innerbuttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    tasks.length > 0 &&\r\n    <span className=\"section__span\">\r\n        <button\r\n            onClick={toggleHideDone}\r\n            className=\"section__span--button\"> {hideDone ? \"Show\" : \"Hide\"} done tasks\r\n        </button>\r\n\r\n        <button\r\n            onClick={setAllDone}\r\n            className=\"section__span--button\"\r\n            disabled={tasks.every(({ done }) => done)}> Mark all as done\r\n            </button>\r\n    </span>\r\n);\r\n\r\nexport default Innerbuttons;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Section = ({ title, body, innerbuttons }) => (\r\n  <section className=\"section\">\r\n    <div className=\"section__top\">\r\n      <h2 className=\"section__header\">{title}</h2>\r\n      {innerbuttons}\r\n    </div>\r\n    {body}\r\n  </section>\r\n);\r\n\r\nexport default Section;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Main = ({ title, children }) => (\r\n    <main className=\"main\">\r\n        <h1 className=\"main__header\">{title}</h1>\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Main;","import React, { useState } from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Innerbuttons from \"./InnerButtons\";\nimport Section from \"./Section\";\nimport Main from \"./Main\";\n\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState([]);\n\n  const removeTask = (id) => {\n    setTasks(tasks.filter(task => task.id !== id));\n  }\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(tasks => ({\n      ...tasks,\n      done: true,\n    })));\n  }\n\n  const addNewTask = (newTaskContent) => {\n    if (newTaskContent === \"\") {\n      return;\n    } else {\n    setTasks(tasks => \n      [...tasks,\n      {\n        content: newTaskContent,\n        done: false,\n        id: tasks.length === 0 ? 1 : tasks[tasks.length -1].id + 1,\n      }]);\n    }\n  };\n\n  return (\n    <Main\n      title=\"To-do List\"\n    >\n      <Section\n        title=\"Add new task\"\n        body={<Form \n        addNewTask={addNewTask}\n        />}\n      />\n      <Section\n        title=\"Task list\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />}\n        innerbuttons={\n          <Innerbuttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />}\n      />\n    </Main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}