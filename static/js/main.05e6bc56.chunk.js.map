{"version":3,"sources":["Form/index.js","Tasks/index.js","InnerButtons/index.js","Section/index.js","Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","placeholder","Tasks","tasks","allTasksHidden","map","task","done","content","Innerbuttons","length","disabled","every","Section","title","body","innerbuttons","Main","children","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAUeA,G,UAPF,kBACT,0BAAMC,UAAU,QACZ,2BAAOA,UAAU,mBAAmBC,YAAY,4BAChD,4BAAQD,UAAU,gBAAlB,gBCeOE,G,MAlBD,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,eAAT,OACV,6BACKD,EAAME,KAAI,SAAAC,GAAI,OACX,yBAAKN,UAAS,wBAAmBM,EAAKC,MAAQH,EAAiB,eAAiB,KAC5E,4BAAQJ,UAAU,8BACbM,EAAKC,KAAO,SAAM,IAEvB,0BAAMP,UAAS,wBAAmBM,EAAKC,KAAO,0CAA4C,KACrFD,EAAKE,SAEV,4BAAQR,UAAU,+BAAlB,iBCADS,G,MAVM,SAAC,GAAD,IAAGN,EAAH,EAAGA,MAAOC,EAAV,EAAUA,eAAV,OACjBD,EAAMO,OAAS,GACf,0BAAMV,UAAU,iBACZ,4BAAQA,UAAU,yBAAlB,IAA4CI,EAAiB,OAAS,OAAtE,eAEA,4BAAQJ,UAAU,wBAAwBW,SAAUR,EAAMS,OAAM,qBAAGL,SAAnE,uBCKOM,G,MAVC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,aAAhB,OACd,6BAAShB,UAAU,WACjB,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,mBAAmBc,GAChCE,GAEFD,KCCUE,G,MAPF,SAAC,GAAD,IAAGH,EAAH,EAAGA,MAAOI,EAAV,EAAUA,SAAV,OACT,0BAAMlB,UAAU,QACZ,wBAAIA,UAAU,gBAAgBc,GAC7BI,KCCHf,EAAQ,CACZ,CAACgB,GAAI,EAAGX,QAAS,MAAOD,MAAM,GAC9B,CAACY,GAAI,EAAGX,QAAS,MAAOD,MAAM,IAuBjBa,MAlBf,WACE,OACI,kBAAC,EAAD,CACAN,MAAM,cAEN,kBAAC,EAAD,CACAA,MAAM,eACNC,KAAM,kBAAC,EAAD,QAEN,kBAAC,EAAD,CACAD,MAAM,YACNC,KAAM,kBAAC,EAAD,CAAOZ,MAAOA,EAAOC,gBAbV,IAcjBY,aAAc,kBAAC,EAAD,CAAcb,MAASA,EAAOC,gBAd3B,QCAHiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.05e6bc56.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Form = () => (\r\n    <form className=\"form\">\r\n        <input className=\"form__inputField\" placeholder=\"What do you want to do?\" />\r\n        <button className=\"form__button\">Add to-do</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({tasks, allTasksHidden}) => (\r\n    <div>\r\n        {tasks.map(task => (\r\n            <div className={`taskContainer ${task.done && allTasksHidden ? \"task--hidden\" : \"\"}`}>\r\n                <button className=\"taskContainer__checkButton\">\r\n                    {task.done ? \"âœ”\" : \"\"}\r\n                </button>\r\n                <span className={`addedTaskText ${task.done ? \"taskContainer__checkButton--lineThrough\" : \"\"}`}>\r\n                    {task.content}\r\n                </span>\r\n                <button className=\"taskContainer__removeButton\">\r\n                    &#10006;\r\n                </button>\r\n            </div>\r\n        ))}\r\n    </div>\r\n);\r\n\r\nexport default Tasks;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Innerbuttons = ({ tasks, allTasksHidden }) => (\r\n    tasks.length > 0 &&\r\n    <span className=\"section__span\">\r\n        <button className=\"section__span--button\"> {allTasksHidden ? \"Show\" : \"Hide\"} done tasks</button>\r\n\r\n        <button className=\"section__span--button\" disabled={tasks.every(({ done }) => done)}>\r\n            Mark all as done</button>\r\n    </span>\r\n);\r\n\r\nexport default Innerbuttons;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Section = ({ title, body, innerbuttons }) => (\r\n  <section className=\"section\">\r\n    <div className=\"section__top\">\r\n      <h2 className=\"section__header\">{title}</h2>\r\n      {innerbuttons}\r\n    </div>\r\n    {body}\r\n  </section>\r\n);\r\n\r\nexport default Section;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Main = ({ title, children }) => (\r\n    <main className=\"main\">\r\n        <h1 className=\"main__header\">{title}</h1>\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Main;","import React from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Innerbuttons from \"./InnerButtons\";\nimport Section from \"./Section\";\nimport Main from \"./Main\";\n\nconst tasks = [\n  {id: 1, content: \"aaa\", done: true},\n  {id: 2, content: \"bbb\", done: false},\n];\n\nconst allTasksHidden = false;\n\nfunction App() {\n  return (\n      <Main\n      title=\"To-do List\"\n      >\n      <Section \n      title=\"Add new task\" \n      body={<Form />}\n      />\n      <Section \n      title=\"Task list\" \n      body={<Tasks tasks={tasks} allTasksHidden={allTasksHidden} />}\n      innerbuttons={<Innerbuttons tasks = {tasks} allTasksHidden = {allTasksHidden}/>}\n      />\n    </Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}